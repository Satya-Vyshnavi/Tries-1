T.c --> O(nl)--> where n --> length of thw word, l --> avg length of the word.
S.c --> O(nl)
class Solution {
    class TrieNode{
      TrieNode[] children;
      String word;
      public TrieNode(){
        children = new TrieNode[26];
      }
    }    
    public String longestWord(String[] words) {
        TrieNode root = new TrieNode();
        for(String str: words){
            insert(str,root);
        }
        Queue<TrieNode> q = new LinkedList<>();
        q.add(root);
        TrieNode curr = new TrieNode();
        while(!q.isEmpty()){
          curr = q.poll();
          for(int i =25; i>=0; i--){
            TrieNode child = curr.children[i];
            if(child != null && child.word != null){
                q.add(child);
            }
          }          
        }
        if(curr.word == null){
            return "";
        }
        return curr.word;
    }
    public void insert(String word, TrieNode root){
        TrieNode curr = root;
        for(int i =0; i<word.length(); i++){
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null){
                curr.children[c-'a'] = new TrieNode();
            }
            curr = curr.children[c-'a'];
        }
        curr.word = word;
    }

}