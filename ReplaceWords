T.c --> O(kl+mn)--> where m --> no of words in a sentence , n--> avg length of a word, 
                 --> k --> no of words in a dictionary , l --> avg length of a word in a dictionary
S.c --> O(kl + m)
class Solution {
    class TrieNode{
       boolean isEnd;
       TrieNode[] children;
       public TrieNode(){
        isEnd = false;
        children = new TrieNode[26];
       }
    }
    TrieNode root;
    public void insert(String word){
      TrieNode curr = root;
      for(int i =0; i<word.length(); i++){
        char c = word.charAt(i);
        if(curr.children[c-'a'] == null){
            curr.children[c-'a'] = new TrieNode();
        }     
        curr = curr.children[c-'a'];   
      }
      curr.isEnd = true;
    }

    public String replaceWords(List<String> dictionary, String sentence) {
        if(sentence == null || sentence.length() == 0){
            return sentence;
        }
        String[] strs = sentence.split(" ");
        StringBuilder result = new StringBuilder();
        root = new TrieNode();
        for(String str: dictionary){
            insert(str);
        }         
        for(int i =0; i<strs.length; i++){
            if(i != 0){
                result.append(" ");
            }
            TrieNode curr = root;
            String word = strs[i];
            StringBuilder sb = new StringBuilder();
            for(int j =0; j<word.length();j++){
                 char c = word.charAt(j);
                 if(curr.children[c - 'a'] == null || curr.isEnd == true){
                    break;
                 }
                 sb.append(c);
                 curr = curr.children[c-'a'];                 
            }
            if(curr.isEnd){
                result.append(sb);
            }else{
                result.append(word);
            }
        }
        return result.toString();
    }
}